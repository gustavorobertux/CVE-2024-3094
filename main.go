package main

import (
	"fmt"
	"os/exec"
	"runtime"
	"strings"
)

func main() {
	fmt.Println("Checking system for CVE-2024-3094 Vulnerability...")
	fmt.Println("https://nvd.nist.gov/vuln/detail/CVE-2024-3094")

	if runtime.GOOS == "darwin" { // Check if macOS
		fmt.Println("macOS is not directly vulnerable due to missing systemd component. Skipping checks.")
		return
	}

	// Find path to liblzma used by sshd
	sshdPath, err := exec.Command("whereis", "-b", "sshd").Output()
	if err != nil {
		fmt.Println("Error:", err)
		return
	}
	fields := strings.Fields(string(sshdPath))
	if len(fields) < 2 {
		fmt.Println("sshd path not found")
		return
	}
	sshdPathStr := fields[1]
	lddOutput, err := exec.Command("ldd", sshdPathStr).Output()
	if err != nil {
		fmt.Println("Error:", err)
		return
	}
	path := strings.Split(strings.Split(string(lddOutput), "liblzma")[1], " ")[0]

	// Find path to liblzma used by xz
	if path == "" {
		xzPath, err := exec.Command("whereis", "-b", "xz").Output()
		if err != nil {
			fmt.Println("Error:", err)
			return
		}
		fields := strings.Fields(string(xzPath))
		if len(fields) < 2 {
			fmt.Println("xz path not found")
			return
		}
		xzPathStr := fields[1]
		lddOutput, err := exec.Command("ldd", xzPathStr).Output()
		if err != nil {
			fmt.Println("Error:", err)
			return
		}
		path = strings.Split(strings.Split(string(lddOutput), "liblzma")[1], " ")[0]
	}

	if path == "" {
		fmt.Println("Probably not vulnerable (liblzma not found)")
		return
	}

	// Check for function signature
	sigCheck, err := exec.Command("hexdump", "-ve", "1/1 \"%02x\"", path).Output()
	if err != nil {
		fmt.Println("Error:", err)
		return
	}
	if strings.Contains(string(sigCheck), "f30f1efa554889f54c89ce5389fb81e7000000804883ec28488954241848894c2410") {
		fmt.Println("Function signature in liblzma: VULNERABLE")
	} else {
		fmt.Println("Function signature in liblzma: OK")
	}
}
