package main

import (
	"fmt"
	"os/exec"
	"strings"
)

func main() {
	fmt.Println("Checking system for CVE-2024-3094 Vulnerability...")
	fmt.Println("https://nvd.nist.gov/vuln/detail/CVE-2024-3094")

	// Find path to liblzma used by sshd
	sshdPath, _ := exec.Command("whereis", "-b", "sshd").Output()
	sshdPathStr := strings.Fields(string(sshdPath))[1]
	lddOutput, _ := exec.Command("ldd", sshdPathStr).Output()
	path := strings.Split(strings.Split(string(lddOutput), "liblzma")[1], " ")[0]

	// Find path to liblzma used by xz
	if path == "" {
		xzPath, _ := exec.Command("whereis", "-b", "xz").Output()
		xzPathStr := strings.Fields(string(xzPath))[1]
		lddOutput, _ = exec.Command("ldd", xzPathStr).Output()
		path = strings.Split(strings.Split(string(lddOutput), "liblzma")[1], " ")[0]
	}

	if path == "" {
		fmt.Println("Probably not vulnerable (liblzma not found)")
		return
	}

	// Check for function signature
	sigCheck, _ := exec.Command("hexdump", "-ve", "1/1 \"%02x\"", path).Output()
	if strings.Contains(string(sigCheck), "f30f1efa554889f54c89ce5389fb81e7000000804883ec28488954241848894c2410") {
		fmt.Println("Function signature in liblzma: VULNERABLE")
	} else {
		fmt.Println("Function signature in liblzma: OK")
	}

	// Check xz version using package manager
	pkgManager := ""
	var xzVersion string
	dpkgCheck, _ := exec.Command("dpkg", "--version").Output()
	if strings.Contains(string(dpkgCheck), "not found") {
		rpmCheck, _ := exec.Command("rpm", "--version").Output()
		if strings.Contains(string(rpmCheck), "not found") {
			pacmanCheck, _ := exec.Command("pacman", "--version").Output()
			if strings.Contains(string(pacmanCheck), "not found") {
				fmt.Println("Unsupported package manager. This script requires dpkg, rpm, or pacman.")
				return
			}
			pkgManager = "pacman"
		} else {
			pkgManager = "rpm"
		}
	} else {
		pkgManager = "dpkg"
	}

	switch pkgManager {
	case "dpkg":
		dpkgXZ, _ := exec.Command("dpkg", "-s", "xz-utils").Output()
		if strings.Contains(string(dpkgXZ), "not found") {
			dpkgXZ, _ = exec.Command("dpkg", "-s", "xz").Output()
		}
		xzVersion = strings.Split(strings.Split(string(dpkgXZ), "Version: ")[1], "\n")[0]
	case "rpm":
		rpmXZ, _ := exec.Command("rpm", "-q", "xz", "--qf", "%{VERSION}-%{RELEASE}\\n").Output()
		xzVersion = strings.TrimSpace(string(rpmXZ))
	case "pacman":
		pacmanXZ, _ := exec.Command("pacman", "-Qi", "xz").Output()
		xzVersion = strings.Split(strings.Fields(string(pacmanXZ))[2], "\n")[0]
	default:
		fmt.Println("Error: Unsupported package manager.")
		return
	}

	if xzVersion == "" {
		fmt.Println("Could not determine xz version.")
		return
	}

	// Check xz version for vulnerability
	if strings.HasPrefix(xzVersion, "5.6.0") || (strings.HasPrefix(xzVersion, "5.6.1") && !strings.HasPrefix(xzVersion, "5.6.1+really") && !strings.HasPrefix(xzVersion, "5.6.1-2")) {
		fmt.Printf("xz version %s: VULNERABLE\n", xzVersion)
	} else if strings.HasPrefix(xzVersion, "5.6.1+really") || strings.HasPrefix(xzVersion, "5.6.1-2") {
		fmt.Printf("xz version %s: OK (patched)\n", xzVersion)
	} else {
		fmt.Printf("xz version %s: OK\n", xzVersion)
	}
}
